//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;

[Serializable]
public class Splitter : Component
{
    // ---------------------- Fields ----------------------

    private int inflow;
    private int outflowUp;
    private int outflowBottom;

    // ------------------- Constructors -------------------

    public Splitter(Point location) : base(location)
    {
        Position = location;
    }

    // ------------------- Properties ---------------------
    public int InFlow { get { return inflow; } set { inflow = value; } }
    public int OutflowUp { get { return outflowUp; } set { outflowUp = value; } }
    public int OutflowBottom { get { return outflowBottom; } set { outflowBottom = value; } }

    // --------------------- Methods ----------------------

    /*/// <summary>
    /// This method changes the in- or output state of the Splitter.
    /// </summary>
    /// <param name="location">The location in the white area that was clicked by the user.</param>
    /// <param name="state">A boolean value. True indicates the in- or output is free, false indicates it is occupied.</param>
    public override void changeStateInOut(Point location, bool state)
    {
        if (location.X > Position.X + PictureSize / 2)
        {
            if (location.Y > Position.Y + PictureSize / 2)
                outStates[1] = true;
            else
                outStates[0] = true;
        }
        else
        {
            inState = true;
        }
    }*/

    public override void recalculateFlow(int newFlow)
    {
        inflow = newFlow;
        outflowBottom = outflowUp = inflow / 2;

        for (int i = 1; i <= 2; i++)
        {
            if (PipelineList[i] != null)
                PipelineList[i].recalculateFlow(newFlow / 2);
        }
    }
}

