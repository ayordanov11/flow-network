//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;

[Serializable]
public abstract class Component
{
    // ----------- fields -----------------
    private int pictureSize;
    private Point position;
    private List<Pipeline> pipelineList;

    // ----------- constructor ------------
    public Component(Point location)
    {
        Position = location;
        pipelineList = new List<Pipeline>();
        if (this is PumpSink)
        {
            pipelineList.Add(null);
        }
        else if (this is Splitter || this is Merger)
        {
            pipelineList.Add(null);
            pipelineList.Add(null);
            pipelineList.Add(null);
        }

        pictureSize = 50;
    }

    // ----------- properties -------------
    public Point Position { get { return position; } set { position = value; } }
    public List<Pipeline> PipelineList { get { return pipelineList; } set { pipelineList = value; } }
    public int PictureSize { get { return pictureSize; } }

    // ----------- methods ----------------
    // abstract public void changeStateInOut(Point location, bool state);
    abstract public void recalculateFlow(int newFlow);

    public void findSource()
    {
        if (this is Merger)
            for (int i = 0; i<2; i++)
            {
                if (this.PipelineList[i]!=null)
                {
                    if (this.PipelineList[i].Connection[0] is PumpSink)
                    {
                        this.PipelineList[i].Connection[0].recalculateFlow(((PumpSink)this.PipelineList[i].Connection[0]).CurrentFlow);
                    }
                    else
                        this.PipelineList[i].Connection[0].findSource();
                }
            }
        else if (this is Splitter)
        {
            if (this.PipelineList[0] != null)
            {
                if (this.PipelineList[0].Connection[0] is PumpSink)
                    this.PipelineList[0].Connection[0].recalculateFlow(((PumpSink)this.PipelineList[0].Connection[0]).CurrentFlow);
                else
                    this.PipelineList[0].Connection[0].findSource();
            }
        }         
        else
        {
            ((PumpSink)this).recalculateFlow(((PumpSink)this.PipelineList[0].Connection[0]).CurrentFlow);
        }
    }

    public void draw(Graphics gr)
    {
        if (this is PumpSink)
        {
            if (((PumpSink)this).IsSink == true)
                gr.DrawImage(Image.FromFile(Environment.CurrentDirectory+"/../../pics/SinkPictureBox.Image.png"),this.Position.X,this.Position.Y, this.pictureSize, this.pictureSize);
            else
                gr.DrawImage(Image.FromFile(Environment.CurrentDirectory+"/../../pics/Pump_pictureBox.Image.png"), this.Position.X, this.Position.Y, this.pictureSize, this.pictureSize);
        }
        else if (this is AdjustableSplitter)
        {
            gr.DrawImage(Image.FromFile(Environment.CurrentDirectory+"/../../pics/AdjSplitterPictureBox.Image.png"), this.Position.X, this.Position.Y, this.pictureSize, this.pictureSize);
        }
        else if (this is Splitter)
        {
            gr.DrawImage(Image.FromFile(Environment.CurrentDirectory+"/../../pics/SplitterPictureBox.Image.png"), this.Position.X, this.Position.Y, this.pictureSize, this.pictureSize);
        }
        else if (this is Merger)
        {
            gr.DrawImage(Image.FromFile(Environment.CurrentDirectory+"/../../pics/MergerPictureBox.Image.png"), this.Position.X, this.Position.Y, this.pictureSize, this.pictureSize);
        }
    }
}

