//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class Network
{
	private string name
	{
		get;
		set;
	}

	private List<Component> componentsList
	{
		get;
		set;
	}

	private List<Pipeline> pipelineList
	{
		get;
		set;
	}

	public Component selectedComponent
	{
		get;
		set;
	}

	public IEnumerable<Component> Component
	{
		get;
		set;
	}

	public IEnumerable<Pipeline> Pipeline
	{
		get;
		set;
	}

	public void addComponent(Component theComponent)
	{
		throw new System.NotImplementedException();
	}

	public bool removeComponent(Component theComponent)
	{
		throw new System.NotImplementedException();
	}

	public void addPipeline(List<Point> thePoints)
	{
		throw new System.NotImplementedException();
	}

	public bool removePipeline(Pipeline thePipeline)
	{
		throw new System.NotImplementedException();
	}

	public virtual Component findComponent(Point location)
	{
		throw new System.NotImplementedException();
	}

	public bool changeCurrentFlow(Component theComponent, int newFlow)
	{
		throw new System.NotImplementedException();
	}

	public bool changeMaxFlow(Component theComponent, int newMaxFlow)
	{
		throw new System.NotImplementedException();
	}

	public bool changeSplitterPercentage(Component theComponent, int newPercentage)
	{
		throw new System.NotImplementedException();
	}

	public Network(string name)
	{
        this.name = name;
	}

	public bool checkPipelineOrigin(Point thePoint)
	{
        Component theComponent = findComponent(thePoint);
        if (theComponent == null) return false;
        if (theComponent.)
		throw new System.NotImplementedException();
	}

	public bool checkPipelineInbetween(Point thePoint)
	{
		throw new System.NotImplementedException();
	}

	public bool checkPipelineEnd(Point thePoint)
	{
		throw new System.NotImplementedException();
	}

	public bool isOccupied(Point thePoint)
	{
        if (findComponent(thePoint) != null) return true;
        if (findPipeline(thePoint) != null) return true;
        return false;
	}

	public Pipeline findPipeline(Point location)
	{
		throw new System.NotImplementedException();
	}

	public void paint()
	{
		foreach (Pipeline thePipeline in pipelineList)
        {

        }

        foreach (Component theComponent in componentsList)
        {

        }
	}

}

